{"version":3,"file":"PRVue.js","sources":["webpack:///webpack/bootstrap 5d2339176b4fd5209998","webpack:///./src/index.js","webpack:///./src/observer.js","webpack:///./src/dep.js","webpack:///./src/compile.js","webpack:///./src/updater.js","webpack:///./src/watcher.js"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 5d2339176b4fd5209998\n **/","var Observe = require('./observer').Observe;\nvar Compile = require('./compile').Compile;\n\n/**\n * PRVue实例入口\n * @param  {Object} options [实例参数]\n */\nvar PRVue = function(options) {\n    this.options = options || {};\n    var data = this.data = this.options.data;\n\n    //代理vm.data.xxx, 便于用vm.xxxx访问\n    var _self = this;\n    Object.keys(data).forEach(function(key) {\n        _self.proxy(key);\n    });\n    //创建Obsever实例\n    Observe(this.data);\n    //创建Compiler实例\n    new Compile(this.options.el, this);\n};\n\nvar p = PRVue.prototype;\n\n/**\n * vm.$data的代理方法,通过vm.x来访问vm.$data.x\n * @param  {[type]} key [description]\n * @return {[type]}     [description]\n */\np.proxy = function(key) {\n    Object.defineProperty(this, key, {\n        configurable: false,\n        enumerable: true,\n        get: function() {\n            return this.data[key];\n        },\n        set: function(newValue) {\n            this.data[key] = newValue;\n        }\n    })\n};\n\nwindow.PRVue = PRVue;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/index.js\n ** module id = 1\n ** module chunks = 0\n **/","var Dep = require('./dep').Dep;\n\n/**\n * observe入口, 验证data数据，并创建实例\n * @param  {Object} data\n */\nvar Observe = function(data) {\n    if (!data || typeof data !== 'object') {\n        return;\n    }\n    new Observer(data);\n};\n\n/**\n * Observer实例的构造方法, 绑定需要订阅的data, 并执行逻辑\n * @param  {Object} data\n */\nvar Observer = function(data) {\n    this.data = data;\n    this.dep = new Dep();\n    this.start();\n};\n\nvar p = Observer.prototype;\n\n/**\n * 枚举data属性, 转化为getter, setter\n */\np.start = function() {\n    var _self = this;\n    Object.keys(this.data).forEach(function(key) {\n        _self.defineProperty(_self.data, key, _self.data[key]);\n    });\n};\n\n/**\n * getter, setter转化方法, 并对应一个deps实例\n * get触发时候添加一个Watcher到deps\n * set触发时候通知deps的Watcher有数据更新\n * @param  {Object} data\n * @param  {String} key\n * @param  {String or Object} value\n */\np.defineProperty = function(data, key, value) {\n    //判断value是否是object,如果也是，递归处理，转化成getter, setter\n    Observe(value);\n\n    var _self = this;\n\n    Object.defineProperty(data, key, {\n        configurable: false,\n        enumerable: true,\n        get: function() {\n            //只有当watcher被实例化后，才能push Watcher\n            if (Dep.target) _self.dep.depend();\n            return value;\n        },\n        set: function(newValue) {\n            _self.dep.notify();\n            //如果newValue是一个新的Object, 则需要转化为getter, setter\n            Observe(newValue);\n\n            value = newValue;\n        }\n    });\n};\n\nexports.Observe = Observe;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/observer.js\n ** module id = 2\n ** module chunks = 0\n **/","var uid = 0;\n\nvar Dep = function() {\n    this.id = uid++;\n    this.subs = [];\n};\n\nvar p = Dep.prototype;\n\np.addSub = function (sub) {\n    this.subs.push(sub);\n};\n\np.removeSub = function(sub) {\n    if (this.subs.indexOf(sub) !== -1) this.subs.splice(index, 1);\n};\n\np.depend = function() {\n    Dep.target.addDep(this);\n    console.log('id: ' + this.id);\n}\n\np.notify = function() {\n    this.subs.forEach(function(sub) {\n        sub.update();\n    });\n};\n\nexports.Dep = Dep;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/dep.js\n ** module id = 3\n ** module chunks = 0\n **/","var Updater = require('./updater').Updater;\nvar Watcher = require('./watcher').Watcher;\n\n/**\n * Complie入口，初始化Complie实例，绑定vm和el\n * @param  {String} el 模板id (#app)\n * @param  {vm} vm PRVue实例\n */\nvar Compile = function(el, vm) {\n    this.vm = vm;\n    this.el = this.isElementNode(el) ? el : document.querySelector(el);\n\n    //将el转化为document fragment, 并解析模板(目前只解析了文本节点)\n    if (this.el) {\n        this.fragment = this.nodeToFragment(this.el);\n        this.init();\n        this.el.appendChild(this.fragment);\n    }\n};\n\nvar p = Compile.prototype;\n\n/**\n * 初始化，解析document fragment\n */\np.init = function() {\n    this.compileElement(this.fragment);\n};\n\np.nodeToFragment = function(node) {\n    var fragment = document.createDocumentFragment(), child;\n\n    while (child = node.firstChild) {\n        fragment.appendChild(child);\n    }\n\n    return fragment;\n};\n\n/**\n * 递归解析document fragment 并且为每个文本节点({{ }})实例化watcher, 并且初始化文本节点数据\n * @param  {Object} el\n */\np.compileElement = function(el) {\n    var childNodes = el.childNodes;\n    var _self = this;\n    [].forEach.call(childNodes, function(node) {\n        var text = node.textContent;\n        //has bug {{ }}{{ }}\n        var reg = /\\{\\{(.*)\\}\\}/;\n\n        if (_self.isTextNode(node) && reg.test(text)) {\n            _self.compileText(node, RegExp.$1);\n        }\n        //递规处理其子节点\n        if (node.childNodes && node.childNodes.length) {\n            _self.compileElement(node);\n        }\n    });\n};\n\np.compileText = function(node, exp) {\n    CompileUtil.text(this.vm, node, exp);\n};\n\np.isElementNode = function(node) {\n    return node.nodeType === 1;\n};\n\np.isTextNode = function(node) {\n    return node.nodeType === 3;\n}\n\nvar CompileUtil = {\n    text: function(vm, node, exp) {\n        this.bind(vm, node, exp, 'text');\n    },\n    bind: function(vm, node, exp, type) {\n        var updater = Updater[type + 'Updater'];\n        //第一次数据更新\n        if (updater) updater(node, this.getVmVal(vm, exp));\n        //创建watcher\n        new Watcher(vm, exp, function(value, oldValue) {\n            if (updater) updater(node, value, oldValue);\n        });\n    },\n    getVmVal: function(vm, exp) {\n        var data = vm.data;\n        var exps = exp.split('.');\n        //递归取值，直到取出正确的值\n        exps.forEach(function(exp) {\n            var trimExp = exp.trim();\n            data = data[trimExp];\n        });\n        return data;\n    }\n};\n\nexports.Compile = Compile;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/compile.js\n ** module id = 4\n ** module chunks = 0\n **/","var Updater = {\n    textUpdater: function(node, value) {\n        node.textContent = value;\n    }\n};\n\nexports.Updater = Updater;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/updater.js\n ** module id = 5\n ** module chunks = 0\n **/","var Dep = require('./dep').Dep;\n\n/**\n * Watcher实例入口,\n * @param  {Object}   vm       对应的PRVue实例\n * @param  {String}   exp      表达式 {{a.b.c}}\n * @param  {Function} callback 回调函数，用于触发数据更新\n */\nvar Watcher = function(vm, exp, callback) {\n    this.vm = vm;\n    this.exp = exp;\n    this.callback = callback;\n    this.depsId = {};\n    this.value = this.get();\n};\n\nvar p = Watcher.prototype;\n\np.update = function() {\n    var newValue = this.get();\n    var oldValue = this.value;\n    if (newValue !== oldValue) {\n        this.value = newValue;\n        this.callback.call(this.vm, newValue, oldValue);\n    }\n};\n\np.addDep = function(dep) {\n    if (!this.depsId.hasOwnProperty(dep.id)) {\n        dep.addSub(this);\n        this.depsId[dep.id] = dep;\n    }\n}\n\n/**\n * 获取需要watch的数据, 并让dep持有watcher实例的引用，方便dep push watcher\n * @return {String} 值\n */\np.get = function() {\n    Dep.target = this;\n    var value = this.getVmVal();\n    Dep.target = null;\n\n    return value;\n};\n\n/**\n * 递归exp, 取得value, 并触发getter, push watcher\n * @return {data} 值\n */\np.getVmVal = function() {\n    var data = this.vm.data;\n    var exps = this.exp.split('.');\n\n    exps.forEach(function(exp) {\n        var expTrim = exp.trim();\n        data = data[expTrim];\n    });\n\n    return data;\n};\n\nexports.Watcher = Watcher;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/watcher.js\n ** module id = 6\n ** module chunks = 0\n **/"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACtnlGA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;","sourceRoot":""}